import re
import numpy as np
from make_dag import *
from decimal import *

# groups of traces based on structure
categories = {}

def depth_first_traversal(trace):
    """
    the DFT traverses DAG dict starting with 
    root node; returns a list indicating all
    nodes seen in order. no duplicates are
    kept in case of sync and full paths are 
    not kept.
    """
    from timer import Timer
    nodes = []
    stack = [trace.dag]
    while stack:
	with Timer() as t:
	    cur_node = stack[0]
	    stack = stack[1:]
	    if cur_node.id not in nodes: #do not duplicate in case of sync
		nodes.append(cur_node.id)
	    for child in cur_node.get_rev_children():
		stack.insert(0, child)
	    print "=> time of start: %s" % t.start
    return nodes 

def hashval(trace):
    """
    hashval takes the list generated by DFT and 
    creates a string for the hash value
    of each trace (stored in trace object).
    """
    lst = depth_first_traversal(trace)
    trunc = [re.search(r'....$', x).group(0) if len(x) > 3 else x for x in lst]
        
    hashval = "".join(trunc)
    return hashval

def group_traces(trace):
    """
    traces with the same hash value (determined by
    hashval function) are in the same group. keys are
    hashvalues, values are lists of trace ids in that
    group.
    """
    maybe_key = categories.get(trace.hashval)
    if maybe_key is not None:
        categories[trace.hashval].append(trace.traceId)
    else:
        categories[trace.hashval] = [trace.traceId]

def trace_lookup(tid, tlist):
    for trace in tlist:
        if trace.traceId == tid:
            return trace
    return none

def process_groups(d, tlist):
    """
    calculates the average completion time of
    traces within a group, as well as variance 
    of each group.
    """
    group_info = {}

    for hashv, traceids in d.items():
        psum = 0
        lst = []
        numvals = len(traceids)

        # count edges
        t = trace_lookup(traceids[0], tlist)
        num_edges = len(t.edges)
 
        # calculate average
        for tid in traceids:
            t = trace_lookup(tid, tlist)
            psum += float(t.response)
        avg = psum / numvals
        
        # calculate variance
        psum = 0
        for tid in traceids:
            t = trace_lookup(tid, tlist)
            curr = (float(t.response) - avg) ** 2            
            psum += curr
        if (numvals - 1) > 1:
            var = (1 / float(numvals - 1)) * psum
        else:
            var = 0

        group_info[hashv] = {'Number of edges': num_edges, 'Trace total time average' : avg, 'Trace total time variance': var}
    return group_info
